
#include "LLCStreamEngine.hh"

#include "mem/ruby/slicc_interface/AbstractStreamAwareController.hh"

// Generated by slicc.
#include "mem/protocol/RequestMsg.hh"
#include "mem/protocol/StreamMigrateRequestMsg.hh"

#include "cpu/gem_forge/llvm_trace_cpu.hh"

#include "base/trace.hh"
#include "debug/RubyStream.hh"

#define LLCSE_DPRINTF(format, args...)                                         \
  DPRINTF(RubyStream, "[LLC_SE%d]: " format,                                   \
          this->controller->getMachineID().num, ##args)

LLCStreamEngine::LLCStreamEngine(AbstractStreamAwareController *_controller,
                                 MessageBuffer *_streamMigrateMsgBuffer,
                                 MessageBuffer *_streamIssueMsgBuffer)
    : Consumer(_controller), controller(_controller),
      streamMigrateMsgBuffer(_streamMigrateMsgBuffer),
      streamIssueMsgBuffer(_streamIssueMsgBuffer), issueWidth(1),
      migrateWidth(1) {}

LLCStreamEngine::~LLCStreamEngine() {
  for (auto &s : this->streams) {
    delete s;
    s = nullptr;
  }
  this->streams.clear();
}

void LLCStreamEngine::receiveStreamConfigure(PacketPtr pkt) {
  auto streamConfigureData = *(pkt->getPtr<CacheStreamConfigureData *>());
  LLCSE_DPRINTF("Received Pkt %#x, StreamConfigure %#x, initVAddr "
                "%#x, "
                "initPAddr %#x.\n",
                pkt, streamConfigureData, streamConfigureData->initVAddr,
                streamConfigureData->initPAddr);
  // Create the stream.
  this->streams.emplace_back(new LLCDynamicStream(streamConfigureData));
  // Release memory.
  delete streamConfigureData;
  delete pkt;

  // Let's schedule a wakeup event.
  this->scheduleEvent(Cycles(1));
}

void LLCStreamEngine::receiveStreamMigrate(LLCDynamicStreamPtr stream) {

  Addr vaddr = stream->peekVAddr();
  Addr paddr = stream->translateToPAddr(vaddr);
  Addr paddrLine = makeLineAddress(paddr);
  assert(this->isPAddrHandledByMe(paddrLine) &&
         "Stream migrated to wrong LLC bank.\n");
  LLCSE_DPRINTF("Received stream migrate.\n");

  this->streams.push_back(stream);
  this->scheduleEvent(Cycles(1));
}

void LLCStreamEngine::receiveStreamFlow(StreamMeta streamMeta) {
  // Simply append it to the list.
  LLCSE_DPRINTF("Received stream flow [%lu, %lu).\n", streamMeta.m_startIdx,
                streamMeta.m_startIdx + streamMeta.m_numElements);
  this->pendingStreamFlowControlMsgs.push_back(streamMeta);
  this->scheduleEvent(Cycles(1));
}

void LLCStreamEngine::wakeup() {
  this->processStreamFlowControlMsg();
  this->issueStreams();
  this->migrateStreams();
  if (!this->streams.empty() || !this->migratingStreams.empty()) {
    this->scheduleEvent(Cycles(1));
  }
}

void LLCStreamEngine::processStreamFlowControlMsg() {
  auto iter = this->pendingStreamFlowControlMsgs.begin();
  auto end = this->pendingStreamFlowControlMsgs.end();
  while (iter != end) {
    const auto &msg = *iter;
    auto staticStream = reinterpret_cast<Stream *>(msg.m_stream);
    // So far we just use the static stream id (pointer),
    // TODO: We may need a dynamic id to distinguish different dynamic
    // TODO: instances.
    bool processed = false;
    for (auto stream : this->streams) {
      if (stream->getStaticStream() == staticStream &&
          msg.m_startIdx == stream->allocatedIdx) {
        // We found it.
        // Update the idx.
        LLCSE_DPRINTF("Stream add credit %lu -> %lu, stream %lu.\n",
                      msg.m_startIdx, msg.m_startIdx + msg.m_numElements,
                      stream->allocatedIdx);
        stream->allocatedIdx += msg.m_numElements;
        processed = true;
        break;
      }
    }
    if (processed) {
      iter = this->pendingStreamFlowControlMsgs.erase(iter);
    } else {
      LLCSE_DPRINTF("Failed to process streawm credit %#x [%lu, %lu).\n",
                    msg.m_stream, msg.m_startIdx,
                    msg.m_startIdx + msg.m_numElements);
      ++iter;
    }
  }
}

void LLCStreamEngine::issueStreams() {
  auto streamIter = this->streams.begin();
  auto streamEnd = this->streams.end();
  StreamList issuedStreams;
  while (streamIter != streamEnd && issuedStreams.size() < this->issueWidth) {
    auto stream = *streamIter;
    bool issued = this->issueStream(stream);
    if (issued) {
      // Check if we want to migrate the stream.
      issuedStreams.emplace_back(stream);
      streamIter = this->streams.erase(streamIter);
    } else {
      // Move to the next one.
      ++streamIter;
    }
  }

  for (auto stream : issuedStreams) {
    // Peek the next physical address.
    auto nextVAddr = stream->peekVAddr();
    auto nextPAddr = stream->translateToPAddr(nextVAddr);
    // Check if it is still on this bank.
    bool shouldMigrate = !this->isPAddrHandledByMe(nextPAddr);
    if (shouldMigrate) {
      this->migratingStreams.emplace_back(stream);
    } else {
      this->streams.emplace_back(stream);
    }
  }
}

bool LLCStreamEngine::issueStream(LLCDynamicStream *stream) {

  /**
   * Key point is to merge continuous stream elements within one cache line.
   * TODO: Really check if continuous. So far just consume until a different
   * TODO: cache line.
   */
  if (!stream->isNextElementAllcoated()) {
    return false;
  }

  // Get the first element.
  int numElements = 0;
  Addr vaddr = stream->peekVAddr();
  Addr paddr = stream->translateToPAddr(vaddr);
  Addr paddrLine = makeLineAddress(paddr);
  assert(this->isPAddrHandledByMe(paddr) && "This should never happen.");
  auto startIdx = stream->consumeNextElement();
  numElements = 1;

  // Try to get more elements.
  while (stream->isNextElementAllcoated()) {
    Addr nextVAddr = stream->peekVAddr();
    Addr nextPAddr = stream->translateToPAddr(nextVAddr);
    Addr nextPAddrLine = makeLineAddress(nextPAddr);
    if (nextPAddrLine == paddrLine && nextVAddr != 0) {
      // We can merge the request.
      stream->consumeNextElement();
      numElements++;
    } else {
      break;
    }
  }

  LLCSE_DPRINTF("LLCStreamEngine issue stream %#x, [%lu, %lu).\n",
                stream->getStaticStream(), startIdx, startIdx + numElements);

  auto selfMachineId = this->controller->getMachineID();
  auto streamCPUId = stream->getStaticStream()->getCPU()->cpuId();
  auto msg = std::make_shared<RequestMsg>(this->controller->clockEdge());
  msg->m_addr = paddrLine;
  msg->m_Type = CoherenceRequestType_GETU;
  msg->m_Requestor =
      MachineID(static_cast<MachineType>(selfMachineId.type - 1), streamCPUId);
  msg->m_Destination.add(selfMachineId);
  msg->m_MessageSize = MessageSizeType_Control;
  msg->m_streamMeta.m_valid = true;
  msg->m_streamMeta.m_stream =
      reinterpret_cast<uint64_t>(stream->getStaticStream());
  msg->m_streamMeta.m_startIdx = startIdx;
  msg->m_streamMeta.m_numElements = numElements;

  Cycles latency(1); // Just use 1 cycle latency here.

  this->streamIssueMsgBuffer->enqueue(msg, this->controller->clockEdge(),
                                      this->controller->cyclesToTicks(latency));
  return true;
}

void LLCStreamEngine::migrateStreams() {
  auto streamIter = this->migratingStreams.begin();
  auto streamEnd = this->migratingStreams.end();
  int migrated = 0;
  while (streamIter != streamEnd && migrated < this->migrateWidth) {
    auto stream = *streamIter;
    this->migrateStream(stream);
    streamIter = this->migratingStreams.erase(streamIter);
    migrated++;
  }
}

void LLCStreamEngine::migrateStream(LLCDynamicStream *stream) {

  // Create the migrate request.
  Addr vaddr = stream->peekVAddr();
  Addr paddr = stream->translateToPAddr(vaddr);
  Addr paddrLine = makeLineAddress(paddr);
  auto selfMachineId = this->controller->getMachineID();
  auto addrMachineId =
      this->controller->mapAddressToLLC(paddrLine, selfMachineId.type);

  LLCSE_DPRINTF("Migrate stream %#x to %s.\n", stream->getStaticStream(),
                MachineIDToString(addrMachineId).c_str());

  auto msg =
      std::make_shared<StreamMigrateRequestMsg>(this->controller->clockEdge());
  msg->m_addr = paddrLine;
  msg->m_Type = CoherenceRequestType_GETS;
  msg->m_Requestor = selfMachineId;
  msg->m_Destination.add(addrMachineId);
  msg->m_MessageSize = MessageSizeType_Data;
  msg->m_Stream = stream;

  Cycles latency(1); // Just use 1 cycle latency here.

  this->streamMigrateMsgBuffer->enqueue(
      msg, this->controller->clockEdge(),
      this->controller->cyclesToTicks(latency));
}

bool LLCStreamEngine::isPAddrHandledByMe(Addr paddr) const {
  auto selfMachineId = this->controller->getMachineID();
  auto addrMachineId =
      this->controller->mapAddressToLLC(paddr, selfMachineId.type);
  return addrMachineId == selfMachineId;
}

void LLCStreamEngine::print(std::ostream &out) const {}