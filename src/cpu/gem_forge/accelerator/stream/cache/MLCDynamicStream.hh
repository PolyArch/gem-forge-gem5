#ifndef __CPU_TDG_ACCELERATOR_STREAM_MLC_DYNAMIC_STREAM_H__
#define __CPU_TDG_ACCELERATOR_STREAM_MLC_DYNAMIC_STREAM_H__

#include "cpu/gem_forge/accelerator/stream/cache/DynamicStreamSliceId.hh"
#include "cpu/gem_forge/accelerator/stream/stream.hh"

#include "mem/ruby/common/DataBlock.hh"

// Generated by slicc.
#include "mem/protocol/ResponseMsg.hh"

#include <list>

class AbstractStreamAwareController;
class MessageBuffer;

class MLCDynamicStream {
public:
  MLCDynamicStream(CacheStreamConfigureData *_configData,
                   AbstractStreamAwareController *_controller,
                   MessageBuffer *_responseMsgBuffer,
                   MessageBuffer *_requestToLLCMsgBuffer);

  Stream *getStaticStream() { return this->stream; }

  const DynamicStreamId &getDynamicStreamId() const {
    return this->dynamicStreamId;
  }
  void receiveStreamData(const ResponseMsg &msg);
  void receiveStreamRequest(uint64_t idx);
  void receiveStreamRequestHit(uint64_t idx);

private:
  Stream *stream;
  DynamicStreamId dynamicStreamId;
  // Store the history;
  std::shared_ptr<::LLVM::TDG::StreamHistory> history;
  AbstractStreamAwareController *controller;
  MessageBuffer *responseMsgBuffer;
  MessageBuffer *requestToLLCMsgBuffer;
  const uint64_t maxNumElements;
  // Element index of allocated [head, tail).
  uint64_t headIdx;
  uint64_t tailIdx;
  // Where the LLC stream's tail index is.
  uint64_t llcTailIdx;

  /**
   * Represent an allocated stream element at MLC.
   * Used as a meeting point for the request from core
   * and data from LLC stream engine.
   */
  struct MLCStreamElement {
    uint64_t startIdx;
    int numElements;
    Addr vaddr;
    DataBlock dataBlock;
    // Whether the core's request is already here.
    bool dataReady;
    enum CoreStatusE { NONE, WAIT, DONE };
    CoreStatusE coreStatus;

    MLCStreamElement(uint64_t _startIdx, int _numElements, Addr _vaddr)
        : startIdx(_startIdx), numElements(_numElements), vaddr(_vaddr),
          dataBlock(), dataReady(false), coreStatus(CoreStatusE::NONE) {}
    void setData(const DataBlock &dataBlock) {
      assert(!this->dataReady && "Data already ready.");
      this->dataBlock = dataBlock;
      this->dataReady = true;
    }
  };

  std::list<MLCStreamElement> elements;

  void advanceStream();
  void allocateElement();
  void makeResponse();
  void sendCreditToLLC();
};

#endif