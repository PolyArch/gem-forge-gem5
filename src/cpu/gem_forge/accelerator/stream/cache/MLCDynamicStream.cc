#include "MLCDynamicStream.hh"

// Generated by slicc.
#include "mem/ruby/protocol/CoherenceMsg.hh"
#include "mem/ruby/protocol/RequestMsg.hh"

#include "mem/ruby/slicc_interface/AbstractStreamAwareController.hh"

#include "cpu/gem_forge/llvm_trace_cpu.hh"

#include "base/trace.hh"
#include "debug/MLCRubyStream.hh"

#define MLC_STREAM_DPRINTF(format, args...)                                    \
  DPRINTF(MLCRubyStream, "[MLC_SE%d][%lu-%d]: " format,                        \
          this->controller->getMachineID().num,                                \
          this->dynamicStreamId.staticId,                                      \
          this->dynamicStreamId.streamInstance, ##args)

#define MLC_STREAM_PANIC(format, args...)                                      \
  this->panicDump();                                                           \
  panic("[MLC_SE%d][%lu]: " format, this->controller->getMachineID().num,      \
        this->dynamicStreamId.staticId, ##args)

#define MLC_STREAM_PANIC_IF(cond, format, args...)                             \
  if ((cond)) {                                                                \
    MLC_STREAM_PANIC(format, ##args);                                          \
  }

#define MLC_SLICE_DPRINTF(sliceId, format, args...)                            \
  DPRINTF(MLCRubyStream, "[MLC_SE%d][%lu-%d][%lu, +%d): " format,              \
          this->controller->getMachineID().num,                                \
          this->dynamicStreamId.staticId,                                      \
          this->dynamicStreamId.streamInstance, (sliceId).startIdx,            \
          (sliceId).endIdx - (sliceId).startIdx, ##args)

MLCDynamicStream::MLCDynamicStream(CacheStreamConfigureData *_configData,
                                   AbstractStreamAwareController *_controller,
                                   MessageBuffer *_responseMsgBuffer,
                                   MessageBuffer *_requestToLLCMsgBuffer,
                                   bool _mergeElements)
    : stream(_configData->stream), dynamicStreamId(_configData->dynamicId),
      isPointerChase(_configData->isPointerChase), slicedStream(_configData),
      controller(_controller), responseMsgBuffer(_responseMsgBuffer),
      requestToLLCMsgBuffer(_requestToLLCMsgBuffer),
      maxNumSlices(_controller->getMLCStreamBufferInitNumEntries()),
      mergeElements(_mergeElements), headSliceIdx(0), tailSliceIdx(0),
      llcTailSliceIdx(0),
      advanceStreamEvent([this]() -> void { this->advanceStream(); },
                         "MLC::advanceStream",
                         false /*delete after process. */) {

  /**
   * ! You should never call any virtual function in the
   * ! constructor/deconstructor.
   */

  // Initialize the llc bank.
  assert(_configData->initPAddrValid && "InitPAddr should be valid.");
  this->tailPAddr = _configData->initPAddr;
  this->tailSliceLLCBank = this->mapPAddrToLLCBank(_configData->initPAddr);

  // Initialize the buffer for some slices.
  // Since the LLC is bounded by the credit, it's sufficient to only check
  // hasOverflowed() at MLC level.
  while (this->tailSliceIdx < this->maxNumSlices &&
         !this->slicedStream.hasOverflowed()) {
    this->allocateSlice();
  }

  this->llcTailSliceIdx = this->tailSliceIdx;
  this->llcTailPAddr = this->tailPAddr;
  this->llcTailSliceLLCBank = this->tailSliceLLCBank;

  // Set the CacheStreamConfigureData to inform the LLC stream engine
  // initial credit.
  _configData->initAllocatedIdx = this->llcTailSliceIdx;

  // Schedule the first advanceStreamEvent.
  this->stream->getCPUDelegator()->schedule(&this->advanceStreamEvent,
                                            Cycles(1));
}

MLCDynamicStream::~MLCDynamicStream() {
  // We got to deschedule the advanceStreamEvent.
  if (this->advanceStreamEvent.scheduled()) {
    this->stream->getCPUDelegator()->deschedule(&this->advanceStreamEvent);
  }
}

void MLCDynamicStream::receiveStreamData(const ResponseMsg &msg) {
  const auto &sliceId = msg.m_sliceId;
  assert(sliceId.isValid() && "Invalid stream slice id for stream data.");

  auto numElements = sliceId.getNumElements();
  assert(this->dynamicStreamId == sliceId.streamId &&
         "Unmatched dynamic stream id.");
  MLC_SLICE_DPRINTF(sliceId, "Receive data %#x.\n", sliceId.vaddr);

  /**
   * It is possible when the core stream engine runs ahead than
   * the LLC stream engine, and the stream data is delivered after
   * the slice is released. In such case we will ignore the
   * stream data.
   *
   * TODO: Properly handle this with sliceIdx.
   */
  if (sliceId.vaddr < this->slices.front().sliceId.vaddr) {
    // The stream data is lagging behind. The slice is already
    // released.
    return;
  }

  /**
   * Find the correct stream slice and insert the data there.
   * Here we reversely search for it to save time.
   */
  for (auto slice = this->slices.rbegin(), end = this->slices.rend();
       slice != end; ++slice) {
    if (slice->sliceId.vaddr == sliceId.vaddr) {
      // Found the slice.
      if (slice->sliceId.getNumElements() != numElements) {
        MLC_STREAM_PANIC("Mismatch numElements, incoming %d, slice %d.\n",
                         numElements, slice->sliceId.getNumElements());
      }
      slice->setData(msg.m_DataBlk);
      if (slice->coreStatus == MLCStreamSlice::CoreStatusE::WAIT) {
        this->makeResponse(*slice);
      }
      this->advanceStream();
      return;
    }
  }

  panic("Failed to find the allocated slice for data. Tail %lu.\n",
        this->tailSliceIdx);
}

void MLCDynamicStream::receiveStreamRequest(
    const DynamicStreamSliceId &sliceId) {
  MLC_SLICE_DPRINTF(sliceId, "Receive request to %#x. Tail %lu.\n",
                    sliceId.vaddr, this->tailSliceIdx);

  /**
   * Let's not make assumption that the request will come in order.
   */
  if (this->slices.empty()) {
    MLC_STREAM_PANIC(
        "No slices for request, overflowed %d, totalTripCount %lu.\n",
        this->slicedStream.hasOverflowed(),
        this->slicedStream.getTotalTripCount());
  }
  bool found = false;
  for (auto &slice : this->slices) {
    /**
     * So far we match them on vaddr.
     * TODO: Really assign the sliceIdx and match that.
     */
    if (slice.sliceId.vaddr == sliceId.vaddr) {
      // Found the slice.
      assert(slice.coreStatus == MLCStreamSlice::CoreStatusE::NONE &&
             "Already seen a request.");
      found = true;
      MLC_SLICE_DPRINTF(slice.sliceId, "Matched to request.\n");
      slice.coreStatus = MLCStreamSlice::CoreStatusE::WAIT;
      if (slice.dataReady) {
        this->makeResponse(slice);
      }
      break;
    }
  }

  if (!found) {
    MLC_STREAM_PANIC("Failed to find slice %s.\n", sliceId);
  }
  this->advanceStream();
}

void MLCDynamicStream::endStream() {
  for (auto &slice : this->slices) {
    if (slice.coreStatus == MLCStreamSlice::CoreStatusE::WAIT) {
      // Make a dummy response.
      // Ignore if the data is ready.
      this->makeResponse(slice);
    }
  }
}

void MLCDynamicStream::receiveStreamRequestHit(
    const DynamicStreamSliceId &sliceId) {
  MLC_SLICE_DPRINTF(sliceId, "Receive request hit.\n");

  /**
   * Let's not make assumption that the request will come in order.
   */
  assert(!this->slices.empty() && "Empty slice list.");
  for (auto &slice : this->slices) {
    if (slice.sliceId.vaddr == sliceId.vaddr) {
      // Found the slice.
      assert(slice.coreStatus == MLCStreamSlice::CoreStatusE::NONE &&
             "Already seen a request.");
      slice.coreStatus = MLCStreamSlice::CoreStatusE::DONE;
      break;
    }
  }
  this->advanceStream();
}

void MLCDynamicStream::advanceStream() {

  /**
   * Maybe let's make release in order.
   * The slice is released once the core status is DONE or FAULTED.
   */
  while (!this->slices.empty()) {
    const auto &slice = this->slices.front();
    if (slice.coreStatus == MLCStreamSlice::CoreStatusE::DONE ||
        slice.coreStatus == MLCStreamSlice::CoreStatusE::FAULTED) {
      MLC_SLICE_DPRINTF(slice.sliceId, "Pop.\n");
      this->headSliceIdx++;
      this->slices.pop_front();
    } else {
      // We made no progress.
      break;
    }
  }
  // Of course we need to allocate more slices.
  while (this->tailSliceIdx - this->headSliceIdx < this->maxNumSlices &&
         !this->slicedStream.hasOverflowed()) {
    this->allocateSlice();
  }
  /**
   * There are two cases we need to send the token:
   * 1. We have allocated more half the buffer size.
   * 2. The sthrea has overflowed.
   */
  if (!this->slicedStream.hasOverflowed()) {
    if (this->tailSliceIdx - this->llcTailSliceIdx > this->maxNumSlices / 2) {
      this->sendCreditToLLC();
    }
  } else {
    if (this->tailSliceIdx > this->llcTailSliceIdx) {
      this->sendCreditToLLC();
    }
  }

  // We may need to schedule advance stream if the first slice is FAULTED,
  // as no other event will cause it to be released.
  if (!this->slices.empty() &&
      this->slices.front().coreStatus == MLCStreamSlice::CoreStatusE::FAULTED) {
    if (!this->advanceStreamEvent.scheduled()) {
      this->stream->getCPUDelegator()->schedule(&this->advanceStreamEvent,
                                                Cycles(1));
    }
  }
}

void MLCDynamicStream::makeResponse(MLCStreamSlice &slice) {
  assert(slice.coreStatus == MLCStreamSlice::CoreStatusE::WAIT &&
         "Element core status should be WAIT to make response.");
  Addr paddr = this->translateVAddr(slice.sliceId.vaddr);
  auto paddrLine = makeLineAddress(paddr);

  auto selfMachineId = this->controller->getMachineID();
  auto upperMachineId = MachineID(
      static_cast<MachineType>(selfMachineId.type - 1), selfMachineId.num);
  auto msg = std::make_shared<CoherenceMsg>(this->controller->clockEdge());
  msg->m_addr = paddrLine;
  msg->m_Class = CoherenceClass_DATA_EXCLUSIVE;
  msg->m_Sender = selfMachineId;
  msg->m_Dest = upperMachineId;
  msg->m_MessageSize = MessageSizeType_Response_Data;

  MLC_SLICE_DPRINTF(slice.sliceId, "Make response.\n");
  // The latency should be consistency with the cache controller.
  // However, I still failed to find a clean way to exponse this info
  // to the stream engine. So far I manually set it to the default
  // value from the L1 cache controller.
  // TODO: Make it consistent with the cache controller.
  Cycles latency(2);
  this->responseMsgBuffer->enqueue(msg, this->controller->clockEdge(),
                                   this->controller->cyclesToTicks(latency));
  // Set the core status to DONE.
  slice.coreStatus = MLCStreamSlice::CoreStatusE::DONE;
}

MLCDynamicStream::MLCStreamSlice &
MLCDynamicStream::getSlice(uint64_t sliceIdx) {
  assert(sliceIdx >= this->headSliceIdx && "Underflow of sliceIdx.");
  assert(sliceIdx < this->tailSliceIdx && "Overflow of sliceIdx.");
  return this->slices.at(sliceIdx - this->headSliceIdx);
}

const MLCDynamicStream::MLCStreamSlice &
MLCDynamicStream::getSlice(uint64_t sliceIdx) const {
  assert(sliceIdx >= this->headSliceIdx && "Underflow of sliceIdx.");
  assert(sliceIdx < this->tailSliceIdx && "Overflow of sliceIdx.");
  return this->slices.at(sliceIdx - this->headSliceIdx);
}

Addr MLCDynamicStream::translateVAddr(Addr vaddr) const {
  auto cpuDelegator = this->getStaticStream()->getCPUDelegator();
  Addr paddr;
  if (!cpuDelegator->translateVAddrOracle(vaddr, paddr)) {
    panic("Failed translate vaddr %#x.\n", vaddr);
  }
  return paddr;
}

void MLCDynamicStream::allocateSlice() {
  auto sliceId = this->slicedStream.getNextSlice();
  MLC_SLICE_DPRINTF(sliceId, "Allocated %#x.\n", sliceId.vaddr);

  this->slices.emplace_back(sliceId);
  this->stream->statistic.numFloatAllocatedSlice++;

  // Try to handle faulted slice.
  Addr paddr;
  auto cpuDelegator = this->getStaticStream()->getCPUDelegator();
  if (cpuDelegator->translateVAddrOracle(sliceId.vaddr, paddr)) {
    // This is address is valid.
  } else {
    // This address is invalid. Mark the slice faulted.
    this->slices.back().coreStatus = MLCStreamSlice::CoreStatusE::FAULTED;
  }

  // Try to find where the LLC stream would be at this point.
  this->tailSliceIdx++;
  if (cpuDelegator->translateVAddrOracle(
          this->slicedStream.peekNextSlice().vaddr, paddr)) {
    // The next slice would be valid.
    this->tailPAddr = paddr;
    this->tailSliceLLCBank = this->mapPAddrToLLCBank(paddr);
  } else {
    // This address is invalid.
    // Do not update tailSliceLLCBank as the LLC stream would not move.
  }
}

MachineID MLCDynamicStream::mapPAddrToLLCBank(Addr paddr) const {
  auto selfMachineId = this->controller->getMachineID();
  auto llcMachineId = this->controller->mapAddressToLLC(
      paddr, static_cast<MachineType>(selfMachineId.type + 1));
  return llcMachineId;
}

void MLCDynamicStream::sendCreditToLLC() {
  /**
   * The LLC stream will be at llcTailSliceLLCBank, and we need to
   * update its credit and the new location is tailSliceLLCBank.
   *
   * This will not work for pointer chasing stream.
   */
  assert(this->tailSliceIdx > this->llcTailSliceIdx &&
         "Don't know where to send credit.");

  // Send the flow control.
  MLC_STREAM_DPRINTF("Extended %lu -> %lu, sent credit to LLC%d.\n",
                     this->llcTailSliceIdx, this->tailSliceIdx,
                     this->llcTailSliceLLCBank.num);
  auto msg = std::make_shared<RequestMsg>(this->controller->clockEdge());
  msg->m_addr = this->llcTailPAddr;
  msg->m_Type = CoherenceRequestType_STREAM_FLOW;
  msg->m_Requestor = this->controller->getMachineID();
  msg->m_Destination.add(this->llcTailSliceLLCBank);
  msg->m_MessageSize = MessageSizeType_Control;
  msg->m_sliceId.streamId = this->dynamicStreamId;
  msg->m_sliceId.startIdx = this->llcTailSliceIdx;
  msg->m_sliceId.endIdx = this->tailSliceIdx;

  Cycles latency(1); // Just use 1 cycle latency here.

  this->requestToLLCMsgBuffer->enqueue(
      msg, this->controller->clockEdge(),
      this->controller->cyclesToTicks(latency));

  // Update the record.
  this->llcTailSliceIdx = this->tailSliceIdx;
  this->llcTailPAddr = this->tailPAddr;
  this->llcTailSliceLLCBank = this->tailSliceLLCBank;
}

void MLCDynamicStream::panicDump() const {
  MLC_STREAM_DPRINTF("-------------------Panic Dump--------------------\n");
  for (const auto &slice : this->slices) {
    MLC_SLICE_DPRINTF(
        slice.sliceId, "Data %d Core %s.\n", slice.dataReady,
        MLCStreamSlice::convertCoreStatusToString(slice.coreStatus).c_str());
  }
}