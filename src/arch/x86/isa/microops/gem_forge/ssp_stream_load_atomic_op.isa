
//////////////////////////////////////////////////////////////////////////
//
// Micro ops that uses one register and one immediate.
//
//////////////////////////////////////////////////////////////////////////

def template MicroSSPLoadAtomicOpExecute {{
        Fault %(class_name)s::execute(ExecContext *xc,
                Trace::InstRecord *traceData) const
        {
            %(op_decl)s;
            %(op_rd)s;
            %(code)s;
            %(op_wb)s;
            return NoFault;
        }

        Fault
        %(class_name)s::initiateAcc(
            ExecContext *xc, Trace::InstRecord *traceData) const {
            Fault fault = NoFault;
            return fault;
        }

        Fault
        %(class_name)s::completeAcc(
            PacketPtr pkt, ExecContext *xc, Trace::InstRecord *traceData) const {
            Fault fault = NoFault;
            return fault;
        }
}};

def template MicroSSPLoadAtomicOpDeclare {{
    class %(class_name)s : public X86ISA::X86MicroopBase
    {
      protected:
        const RegIndex dest;
        const uint64_t imm;
        const uint8_t dataSize;
        RegIndex foldOBit;

        std::string generateDisassembly(Addr pc,
            const ::Loader::SymbolTable *symtab) const;

      public:
        %(class_name)s(ExtMachInst _machInst,
                const char * instMnem,
                uint64_t setFlags, InstRegIndex _dest,
                uint64_t _imm, uint8_t _dataSize);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(
            PacketPtr, ExecContext *, Trace::InstRecord *) const override;
    };
}};

def template MicroSSPLoadAtomicOpDisassembly {{
    std::string %(class_name)s::generateDisassembly(Addr pc,
            const ::Loader::SymbolTable *symtab) const
    {
        std::stringstream response;

        printMnemonic(response, instMnem, mnemonic);
        printDestReg(response, 0, dataSize);
        response << ", ";
        ccprintf(response, "%#x", imm);
        return response.str();
    }
}};

def template MicroSSPLoadAtomicOpConstructor {{
    %(class_name)s::%(class_name)s(
            ExtMachInst machInst, const char * instMnem, uint64_t setFlags,
            InstRegIndex _dest, uint64_t _imm, uint8_t _dataSize) :
        %(base_class)s(machInst, "%(mnemonic)s", instMnem,
                setFlags, %(op_class)s),
                dest(_dest.index()), imm(_imm), dataSize(_dataSize)
    {
        foldOBit = (dataSize == 1 && !machInst.rex.present) ? 1 << 6 : 0;
        %(constructor)s;

        /**
         * ! GemForge
         * Explicitly mark the dest register.
         */
        %(user_constructor)s;
    }
}};

let {{
    class SSPStreamLoadAtomicOp(X86Microop):
        op_class = "MemReadOp"
        def __init__(self, dest, imm, dataSize="env.dataSize", isFloat=False, isAtomic=False):
            if isFloat and isAtomic:
                self.className = "SSPStreamFAtomic"
            elif isFloat:
                self.className = "SSPStreamFLoad"
            elif isAtomic:
                self.className = "SSPStreamAtomic"
            else:
                self.className = "SSPStreamLoad"
            self.dest = dest
            if isinstance(imm, (int, long)):
                imm = "ULL(%d)" % imm
            self.imm = imm
            self.dataSize = dataSize

        def getAllocator(self, microFlags):
            allocString = '''
                (StaticInstPtr)(new %(class_name)s(machInst,
                    macrocodeBlock, %(flags)s, %(dest)s, %(imm)s,
                    %(dataSize)s))
            '''
            allocator = allocString % {
                "class_name" : self.className,
                "flags" : self.microFlagsText(microFlags),
                "dest" : self.dest,
                "imm" : self.imm,
                "dataSize" : self.dataSize
            }
            return allocator

    microopClasses["ssp_stream_load"] = SSPStreamLoadAtomicOp
    microopClasses["ssp_stream_fload"] = SSPStreamLoadAtomicOp
    microopClasses["ssp_stream_atomic"] = SSPStreamLoadAtomicOp
    microopClasses["ssp_stream_fatomic"] = SSPStreamLoadAtomicOp
}};

let {{
    iops = [
        InstObjParams(
            "ssp_stream_load", # mnemonic
            "SSPStreamLoad", # class name
            'X86MicroopBase',
            {
                'code' : '',
                'user_constructor': """
                    flags[IsInteger] = true;
                    _destRegIdx[_numDestRegs++] = RegId(IntRegClass, INTREG_FOLDED(dest, foldOBit));
                    _numIntDestRegs++;
                """,
            },
            ['MemReadOp', 'IsLoad', 'IsMemRef', 'IsGemForge']
        ),
        InstObjParams(
            "ssp_stream_fload",
            "SSPStreamFLoad",
            'X86MicroopBase',
            {
                'code' : '',
                'user_constructor': """
                    flags[IsFloating] = true;
                    /**
                     * ! GemForge
                     * Hack to also mark higher bits as my destination.
                     * Make sure we correctly handle case when dataSize < 64.
                     */
                    for (int i = 0; i < (dataSize + sizeof(uint64_t) - 1) / sizeof(uint64_t); i++) {
                        assert(_numDestRegs < MaxInstDestRegs && "DestRegs overflow.");
                        _destRegIdx[_numDestRegs++] = RegId(FloatRegClass, dest + i);
                        _numFPDestRegs++;
                    }
                """,
            },
            ['FloatMemReadOp', 'IsLoad', 'IsMemRef', 'IsGemForge']
        ),
        InstObjParams(
            "ssp_stream_atomic",
            "SSPStreamAtomic",
            'X86MicroopBase',
            {
                'code' : '',
                'user_constructor': """
                    flags[IsInteger] = true;
                    _destRegIdx[_numDestRegs++] = RegId(IntRegClass, INTREG_FOLDED(dest, foldOBit));
                    _numIntDestRegs++;
                """,
            },
            ['MemReadOp', 'IsAtomic', 'IsMemRef', 'IsGemForge']
        ),
        InstObjParams(
            "ssp_stream_fatomic",
            "SSPStreamFAtomic",
            'X86MicroopBase',
            {
                'code' : '',
                'user_constructor': """
                    flags[IsFloating] = true;
                    /**
                     * ! GemForge
                     * Hack to also mark higher bits as my destination.
                     * Make sure we correctly handle case when dataSize < 64.
                     */
                    for (int i = 0; i < (dataSize + sizeof(uint64_t) - 1) / sizeof(uint64_t); i++) {
                        assert(_numDestRegs < MaxInstDestRegs && "DestRegs overflow.");
                        _destRegIdx[_numDestRegs++] = RegId(FloatRegClass, dest + i);
                        _numFPDestRegs++;
                    }
                """,
            },
            ['FloatMemReadOp', 'IsAtomic', 'IsMemRef', 'IsGemForge']
        ),
    ]
    for iop in iops:
        header_output += MicroSSPLoadAtomicOpDeclare.subst(iop)
        decoder_output += MicroSSPLoadAtomicOpConstructor.subst(iop)
        decoder_output += MicroSSPLoadAtomicOpDisassembly.subst(iop)
        exec_output += MicroSSPLoadAtomicOpExecute.subst(iop)
}};
